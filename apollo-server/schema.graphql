schema {
    query: Query
    mutation: Mutation
}

type Mutation {
    login(loginForm: LoginForm!): User!
    register(registerForm: RegisterForm!): User!

    updateUser(userId: String!, userForm: UserForm!): User

    addJob(refererId: String!, jobForm: JobForm!): Boolean
    updateJob(refererId: String!, jobId: String!, jobForm: JobForm!): Boolean

    updateRefer(referId: String!, referForm: ReferForm!): Boolean
    deleteRefer(referId: String!): Boolean

    addResume(resumeForm: ResumeForm!): Boolean
    updateResume(resumeId: String!, resumeForm: ResumeForm!): Boolean
}

type Query {
    getJobItem(jobId: String!): JobItem!
    getJobItemList(page: Int!): JobItemListPage!

    getUser(userId: String!): User!
    getUserIntro(userId: String!): UserIntro!

    getReferItemList(userId: String!, page: Int!): ReferItemListPage!
    getReferTable(userId: String!, page: Int!): ReferTable!
    getReferDetails(referId: String!): ReferDetails!

    getResumeBody(resumeId: String!): ResumeBody!
}

type JobItemListPage {
    jobItemList: [JobItem!]!
    totalPages: Int!
}

type ReferItemListPage {
    referItemList: [ReferItem!]!
    totalPages: Int!
}

type ReferTable {
    referRowList: [ReferRow!]!
    totalPages: Int!
}

type ReferDetails {
    referId: String!
    resumeId: String!
    jobItem: JobItem!
}

type JobItem {
    jobId: String!
    refererName: String!
    company: String!
    referredCount: Int!
    referTotal: Int!
    deadline: DateTime!
    expiration: Int!
    requiredFields: [String!]!
    createdAt: DateTime!
    source: String!
    avatarUrl: String!
}

type User {
    userId: String!
    jobId: String
    email: String!
    experience: Int!
    avatarUrl: String!
    intro: String
    leetCodeUrl: String
    name: String!
    phone: String
    resumeUrl: String
    thirdPersonIntro: String
}

type ReferItem {
    referId: String!
    jobId: String!
    status: String!
    updatedAt: DateTime!
    company: String!
    refererName: String!
    source: String!
}

type ReferRow {
    referId: String!
    jobId: String!
    resumeId: String!
    experience: Int!
    refereeName: String!
    createdAt: DateTime!
}

type ResumeBody {
    refereeId: String!
    jobId: String!
    email: String!
    name: String!
    experience: Int!
    intro: String!
    leetCodeUrl: String!
    phone: String!
    referLinks: String!
    resumeUrl: String!
    thirdPersonIntro: String!
}

type UserIntro {
    avatarUrl: String!
    name: String!
    finishedRefers: Int!
    totalRefers: Int!
    finishedResumes: Int!
    totalResumes: Int!
}

input LoginForm {
    email: String!
    password: String!
}

input RegisterForm {
    email: String!
    password: String!
}

input ReferForm {
    refereeId: String
    refererId: String
    jobId: String
    resumeId: String
    status: String
    updatedAt: DateTime
    createdAt: DateTime
}

input ResumeForm {
    refereeId: String!
    jobId: String!
    name: String!
    email: String!
    experience: Int!
    intro: String
    phone: String
    leetCodeUrl: String
    thirdPersonIntro: String
    resumeUrl: String
    referLinks: String
}

input UserForm {
    jobId: String!
    email: String!
    experience: Int!
    name: String!
    intro: String
    leetCodeUrl: String
    phone: String
    resumeUrl: String
    thirdPersonIntro: String
    avatarUrl: String
}

input JobForm {
    company: String!
    requiredFields: [String!]!
    deadline: DateTime!
    expiration: Int!
    referredCount: Int!
    referTotal: Int!
    createdAt: DateTime!
    imageUrl: String
    source: String
}


"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON
scalar DateTime
scalar Phone

"The `Upload` scalar type represents a file upload."
scalar Upload
